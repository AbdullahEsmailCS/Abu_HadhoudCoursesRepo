#include<iostream>
#include<string>

using namespace std;
struct OutputFunctions {
    static void Print(const string& message) {
        cout << message << endl;
    }
    static void Print(int value) {
        cout << value << endl;
    }
    static void Print(const string& title, const string& value) {
        cout << title << " : " << value << endl;
    }
    static void Print(const string& title, int value) {
        cout << title << " : " << value << endl;
    }
    static void Print(const string& title, float value) {
        cout << title << " : " << value << endl;
    }
    static void Print(const string& title, char value) {
        cout << title << " : " << value << endl;
    }
    static void Print(const string& title, bool value) {
        cout << title << " : " << ((value) ? "Yes" : "No") << endl;
    }
};

//---------------------------inputs functions
struct InputFunctions {
    static short ReadShort(const string& message) {
        OutputFunctions::Print(message);
        short number;
        cin >> number;
        cin.ignore();
        return number;
    }

    static int ReadInteger(const string& message) {
        OutputFunctions::Print(message);
        int number;
        cin >> number;
        cin.ignore();
        return number;
    }

    static long ReadLong(const string& message) {
        OutputFunctions::Print(message);
        long number;
        cin >> number;
        cin.ignore();
        return number;
    }

    static float ReadFloat(const string& message) {
        OutputFunctions::Print(message);
        float number;
        cin >> number;
        cin.ignore();
        return number;
    }

    static double ReadDouble(const string& message) {
        OutputFunctions::Print(message);
        double number;
        cin >> number;
        cin.ignore();
        return number;
    }

    static bool ReadBoolean(const string& message) {
        OutputFunctions::Print(message);
        bool value;
        cin >> value;
        cin.ignore();
        return value;
    }

    static char ReadChar(const string& message) {
        OutputFunctions::Print(message);
        char letter;
        cin >> letter;
        cin.ignore();
        return letter;
    }

    static string ReadString(const string& message) {
        OutputFunctions::Print(message);
        string letter;
        getline(cin, letter);
        return letter;
    }
};

//--------------------------End input functions
struct ArithmeticOperations {
    // Static method for addition
    static int Add(int a, int b) {
        return a + b;
    }

    // Static method for subtraction
    static int Subtract(int a, int b) {
        return a - b;
    }

    // Static method for multiplication
    static int Multiply(int a, int b) {
        return a * b;
    }

    // Static method for division
    static double Divide(int a, int b) {
        if (b == 0) {
            std::cerr << "Error: Division by zero!" << std::endl;
            return 0; // or handle the error appropriately
        }
        return static_cast<double>(a) / b;
    }

    // Static method for modulus
    static int Modulus(int a, int b) {
        if (b == 0) {
            std::cerr << "Error: Division by zero!" << std::endl;
            return 0; // or handle the error appropriately
        }
        return a % b;
    }
};

struct RelationalOperations {
    // Static method for checking equality
    static bool IsEqual(int a, int b) {
        return a == b;
    }

    // Static method for checking inequality
    static bool IsNotEqual(int a, int b) {
        return a != b;
    }

    // Static method for checking greater than
    static bool IsGreaterThan(int a, int b) {
        return a > b;
    }

    // Static method for checking less than
    static bool IsLessThan(int a, int b) {
        return a < b;
    }

    // Static method for checking greater than or equal to
    static bool IsGreaterThanOrEqual(int a, int b) {
        return a >= b;
    }

    // Static method for checking less than or equal to
    static bool IsLessThanOrEqual(int a, int b) {
        return a <= b;
    }
};

struct LogicalOperations {
    // Static method for logical AND
    static bool And(bool a, bool b) {
        return a && b;
    }

    // Static method for logical OR
    static bool Or(bool a, bool b) {
        return a || b;
    }

    // Static method for logical NOT
    static bool Not(bool a) {
        return !a;
    }
};
struct BitwiseOperations {
    // Static method for bitwise AND
    static int And(int a, int b) {
        return a & b;
    }

    // Static method for bitwise OR
    static int Or(int a, int b) {
        return a | b;
    }

    // Static method for bitwise XOR
    static int Xor(int a, int b) {
        return a ^ b;
    }

    // Static method for bitwise NOT
    static int Not(int a) {
        return ~a;
    }

    // Static method for left shift
    static int LeftShift(int a, int n) {
        return a << n;
    }

    // Static method for right shift
    static int RightShift(int a, int n) {
        return a >> n;
    }
};



int main() {


	return 0;
}